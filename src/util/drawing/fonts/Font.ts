export interface FontData {
    height: number;
    characters: Record<string, number[]>;
}

// converts a string into a letter array. this is easier than 
function parseLetters(string: string): FontData {
    const [ height, characterString ] = string.split("||");
    const chars = characterString.split(" ");
    const arr: Record<string, number[]> = {};
    for(const char of chars) {
        const split = char.split("");
        const title: string | undefined = split.shift();
        if(title == undefined) continue;
        arr[title] = split.map(Number);
    }
    return {
        height: parseInt(height),
        characters: arr,
    };
}

export const fontData: FontData[] = [

    // Font: SMALL_FONT
    parseLetters(`5||a111101111101101 b111101110101111 c111100100100111 d110101101101110 e111100111100111 f111100110100100 g111100101101111 h101101111101101 i111010010010111 j111001001101010 k101101110101101 l100100100100111 m101111101101101 n111101101101101 o111101101101111 p111101111100100 q0111010001100011001001101 r111101110101101 s111100111001111 t111010010010010 u101101101101111 v101101101101010 w101101101111101 x101101010101101 y101101010010010 z111001010100111 .00001 ,00011 :01010 ;01011 !11101 ?111001111000100 -000000111000000 +000010111010000 =000111000111000 _000000000000111 |11111 /00001000100010001000010000 <0001100100 >0010011000 @1111100001111011010111111 #0101011111010101111101010 %1000100010001000100010001 ^010101000000000 *000101010101000 (0110101001 )1001010110 '11000 "101101000000000 0111101101101111 1010110010010111 2111001111100111 3111001111001111 4101101111001001 5111100111001111 6111100111101111 7111001001001001 8111101111101111 9111101111001111`),

    // Font: MEDIUM_FONT
    parseLetters(`6||a111110011111100110011001 b111110011110100110011111 c011110001000100010000111 d111010011001100110011110 e111110001110100010001111 f111110001110100010001000 g111110001011100110011111 h100110011111100110011001 i111101100110011001101111 j111100100010001000101100 k100110101100110010101001 l100010001000100010001111 m100011101110101100011000110001 n100011100110101100111000110001 o111110011001100110011111 p111110011111100010001000 q111110011001100110101101 r111110011111110010101001 s111110001111000100011111 t111101100110011001100110 u100110011001100110010110 v100110011001100101100110 w100011000110001101011101110001 x100110010110011010011001 y100110011111011001100110 z111100010010010010001111 .000001 ,000011 :010010 ;010110 !111101 ?111001111100000100 -000000000111000000 +000000010111010000 =000000111000111000 _000000000000000111 |111111 /001001010010100100 <000001100100 >000010011000 @111110011011101110001111 #010101111101010010101111101010 %101001010010100101 ^010101000000000000 *000101010101000000 (011010101001 )100101010110 '110000 "101101000000000000 0111110011011110110011111 1010110010010010111 2011010010010010010001111 3111100011111000100011111 4100110011111000100010001 5111110001111000100011111 6111110001111100110011111 7111100010001000100010001 8111110011111100110011111 9111110011111000100011111`),

];

/** The length of any given character is gotten with pixelArray.length / height */
export enum Font {

    /** Height 5. Characters between size 3x5, 4x5, and 5x5. */
    SMALL_FONT = 0,

    /** Height 6. Characters between size 3x6, 4x6, and 5x6. */
    MEDIUM_FONT = 1,

}